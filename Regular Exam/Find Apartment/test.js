const { assert } = require('chai')
const findNewApartment = require('./findApartment')


describe('Tests', ()=>{
    it('isGoodLocation',()=>{
        assert.throw(()=>findNewApartment.isGoodLocation('a', null), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a', 'abc'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a', 5), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a', '5'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a', -100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a', ['abc']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation('a'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(5, false), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(null, false), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation([20], false), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(['abc'], false), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(['abc'], ['a']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(20 , ['a']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isGoodLocation(), 'Invalid input!')
        assert.equal(findNewApartment.isGoodLocation('Ruse', false), "This location is not suitable for you.")
        assert.equal(findNewApartment.isGoodLocation('Burgas', false), "This location is not suitable for you.")
        assert.equal(findNewApartment.isGoodLocation('Tarnovo', false), "This location is not suitable for you.")
        assert.equal(findNewApartment.isGoodLocation('100', false), "This location is not suitable for you.")
        assert.equal(findNewApartment.isGoodLocation('', false), "This location is not suitable for you.")
        assert.equal(findNewApartment.isGoodLocation('Sofia', false), "There is no public transport in area.")
        assert.equal(findNewApartment.isGoodLocation('Plovdiv', false), "There is no public transport in area.")
        assert.equal(findNewApartment.isGoodLocation('Varna', false), "There is no public transport in area.")
        assert.equal(findNewApartment.isGoodLocation('Sofia', true), "You can go on home tour!" )
        assert.equal(findNewApartment.isGoodLocation('Plovdiv', true), "You can go on home tour!" )
        assert.equal(findNewApartment.isGoodLocation('Varna', true), "You can go on home tour!" )
    })
    it('isLargeEnough',()=>{
        assert.throw(()=>findNewApartment.isLargeEnough(['a'], null), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(['a'], 'a'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(['a'], '100'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(['a'], ['abc']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(['a']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(5, 50), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(null, 50), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough('abc', 50), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough('50', 50), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough([], 50), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough([], []), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough('abc','b'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isLargeEnough(-100, 0), 'Invalid input!')
        assert.equal(findNewApartment.isLargeEnough([40,50,60,70], 50), '50, 60, 70')
        assert.equal(findNewApartment.isLargeEnough([40,50,60,70], 80), '')
        assert.equal(findNewApartment.isLargeEnough([40,50,60,70], 200), '')
        assert.equal(findNewApartment.isLargeEnough([40,50,60], 20), '40, 50, 60')
        assert.equal(findNewApartment.isLargeEnough([40,50,60], -20), '40, 50, 60')
        assert.equal(findNewApartment.isLargeEnough([40,50], 20), '40, 50')
        assert.equal(findNewApartment.isLargeEnough([40], 20), '40')
        assert.equal(findNewApartment.isLargeEnough([40], 50), '')
    })
    it('isItAffordable',()=>{
        assert.throw(()=>findNewApartment.isItAffordable(0,0), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(-100,0), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(100,-100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(-100,-100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable('50',100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable('a',100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable([1000],100), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable([],'a'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(500,'50'), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(500,''), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(500,[]), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(500,['a']), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(), 'Invalid input!')
        assert.throw(()=>findNewApartment.isItAffordable(['a'],['50']), 'Invalid input!')
        assert.equal(findNewApartment.isItAffordable(200, 120), "You don't have enough money for this house!")
        assert.equal(findNewApartment.isItAffordable(130, 120), "You don't have enough money for this house!")
        assert.equal(findNewApartment.isItAffordable(121, 120), "You don't have enough money for this house!")
        assert.equal(findNewApartment.isItAffordable(120, 120), "You can afford this home!")
        assert.equal(findNewApartment.isItAffordable(119, 120), "You can afford this home!")
        assert.equal(findNewApartment.isItAffordable(100, 120), "You can afford this home!")
        assert.equal(findNewApartment.isItAffordable(50, 120), "You can afford this home!")
    })
})